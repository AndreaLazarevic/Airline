/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms.reservations;

import controller.Controller;
import domain.Airplane;
import domain.AirplaneClass;
import domain.AirplaneClassAirplane;
import domain.Airport;
import domain.Flight;
import domain.Passenger;
import domain.Reservation;
import forms.ClientMainForm;
import forms.FrmMode;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import transfer.Response;
import validator.FormValidator;

/**
 *
 * @author User
 */
public class FrmReservation extends javax.swing.JDialog {
    ClientMainForm cmf = Controller.getInstance().getClientMainForm();
    SearchReservationsPanel srp;
    Reservation reservation;
    Integer collectedPoints;
    Passenger selectedPassenger;
            
    /**
     * Creates new form FrmReservation
     */
    public FrmReservation(java.awt.Frame parent, boolean modal, FrmMode mode) {
        super(parent, modal);
        initComponents();
        
        setLocationRelativeTo(null);
        adjustForm(mode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblID = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtReservationID = new javax.swing.JTextField();
        txtSeatNumber = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtDiscount = new javax.swing.JTextField();
        txtPriceWithDiscount = new javax.swing.JTextField();
        cmbFlights = new javax.swing.JComboBox<>();
        cmbPassengers = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblClass = new javax.swing.JLabel();
        cmbAirplaneClasses = new javax.swing.JComboBox<>();
        lblAvailableSeats = new javax.swing.JLabel();
        txtAvailableSeats = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Reservation"));

        lblID.setText("Reservation ID:");

        jLabel2.setText("Seat number:");

        jLabel3.setText("Price (â‚¬):");

        jLabel4.setText("Discount:");

        jLabel5.setText("Price with discount:");

        jLabel6.setText("Flight:");

        jLabel7.setText("Passenger:");

        txtPriceWithDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPriceWithDiscountActionPerformed(evt);
            }
        });

        cmbFlights.setModel(new javax.swing.DefaultComboBoxModel<>(new Flight[100] ));
        cmbFlights.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFlightsItemStateChanged(evt);
            }
        });
        cmbFlights.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbFlightsPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbFlights.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cmbFlightsMouseReleased(evt);
            }
        });
        cmbFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFlightsActionPerformed(evt);
            }
        });

        cmbPassengers.setModel(new javax.swing.DefaultComboBoxModel<>(new Passenger[100]));
        cmbPassengers.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbPassengersPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblClass.setText("Class:");

        cmbAirplaneClasses.setModel(new javax.swing.DefaultComboBoxModel<>(new AirplaneClass[100] ));
        cmbAirplaneClasses.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbAirplaneClassesPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        lblAvailableSeats.setText("Available seats:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblID)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(txtReservationID, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbFlights, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbPassengers, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(lblAvailableSeats)
                            .addComponent(lblClass))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtAvailableSeats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                    .addComponent(txtDiscount, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtPriceWithDiscount)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(cmbAirplaneClasses, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 295, Short.MAX_VALUE)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(341, 341, 341)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSeatNumber)
                            .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(txtReservationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPassengers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFlights, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAvailableSeats)
                    .addComponent(txtAvailableSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPriceWithDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClass)
                    .addComponent(cmbAirplaneClasses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSeatNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnCancel)
                    .addComponent(btnSave))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPriceWithDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceWithDiscountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceWithDiscountActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        Reservation r = validation();
        if (r == null) {
            return;
        }

        r.setReservationID(reservation.getReservationID());
       
        // When user choose another flight before the update we first need to reset number of taken seats at the previously chosen flight
        if (!reservation.getFlight().equals(r.getFlight())) {
            int resetTakenSeats = reservation.getFlight().getTakenSeats() - 1;
            reservation.getFlight().setTakenSeats(resetTakenSeats);      
        }
        
        int takenSeats = r.getFlight().getTakenSeats();
        r.getFlight().setTakenSeats(takenSeats + 1);
        
        // Calculating new points for the passenger
        int totalCollectedPoints = r.getPassenger().getCollectedPoints();
        int oldPoints = reservation.getFlight().getPoints();
        int points = r.getFlight().getPoints();
        r.getPassenger().setCollectedPoints(totalCollectedPoints + points - oldPoints);
            

        Response response = Controller.getInstance().updateReservation(r);     

        if (response.isSuccessful()) {
            Response response2 = Controller.getInstance().updateFlight(reservation.getFlight());
            if (response2.isSuccessful()) {
                JOptionPane.showMessageDialog(this, response2.getMessage(), "Successful", JOptionPane.INFORMATION_MESSAGE);
                srp.populateReservationsTable();
                srp.setVisible(true);
                resetForm();
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, response2.getMessage(), "Unsuccessful", JOptionPane.ERROR_MESSAGE);
                return;
            }

        } else {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Unsuccessful", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    
    private void cmbFlightsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbFlightsMouseReleased
        

    }//GEN-LAST:event_cmbFlightsMouseReleased

    private void cmbFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFlightsActionPerformed
        
    }//GEN-LAST:event_cmbFlightsActionPerformed

    private void cmbFlightsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFlightsItemStateChanged
        
    }//GEN-LAST:event_cmbFlightsItemStateChanged

    // When user choose the flight, combo box gets populated with available classes
    // Also we set the price for the flight
    private void cmbFlightsPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbFlightsPopupMenuWillBecomeInvisible
        Flight selectedFlight = (Flight) cmbFlights.getSelectedItem();
        populateCmbAirplaneClasses(selectedFlight.getAirplane().getAirplaneID());
        int availableSeats = selectedFlight.getAirplane().getCapacity() - selectedFlight.getTakenSeats();
        txtAvailableSeats.setText(availableSeats + "");
        txtPrice.setText(selectedFlight.getPrice().toString());
        collectedPoints = selectedPassenger.getCollectedPoints();
        setDiscount(collectedPoints);
        selectedFlight = (Flight) cmbFlights.getSelectedItem();
    }//GEN-LAST:event_cmbFlightsPopupMenuWillBecomeInvisible

    private void cmbAirplaneClassesPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbAirplaneClassesPopupMenuWillBecomeInvisible
        AirplaneClass selectedAirplaneClass = (AirplaneClass) cmbAirplaneClasses.getSelectedItem();
        Flight selectedFlight = (Flight) cmbFlights.getSelectedItem();
        generateSeatNumber(selectedAirplaneClass, selectedFlight);
    }//GEN-LAST:event_cmbAirplaneClassesPopupMenuWillBecomeInvisible

    // After user select the passenger we need to get his collected points to calculate the discount
    private void cmbPassengersPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbPassengersPopupMenuWillBecomeInvisible
        selectedPassenger = (Passenger) cmbPassengers.getSelectedItem();
        cmbFlights.setEnabled(true);
    }//GEN-LAST:event_cmbPassengersPopupMenuWillBecomeInvisible

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Reservation r = validation();
        if (r == null) {
            return;
        }

        int currentCollecctedPoints = r.getPassenger().getCollectedPoints();
        int points = r.getFlight().getPoints();
        // we need to subtract already used points
        r.getPassenger().setCollectedPoints(currentCollecctedPoints + points - collectedPoints);

        int currentTakenSeats = r.getFlight().getTakenSeats();
        r.getFlight().setTakenSeats(currentTakenSeats + 1);

        Response response = Controller.getInstance().saveReservation(r);

        if (response.isSuccessful()) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Successful", JOptionPane.INFORMATION_MESSAGE);
            resetForm();

            cmf.setPanel(new SearchReservationsPanel(cmf));
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Unsuccessful", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<AirplaneClass> cmbAirplaneClasses;
    private javax.swing.JComboBox<Flight> cmbFlights;
    private javax.swing.JComboBox<Passenger> cmbPassengers;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAvailableSeats;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblID;
    private javax.swing.JTextField txtAvailableSeats;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtPriceWithDiscount;
    private javax.swing.JTextField txtReservationID;
    private javax.swing.JTextField txtSeatNumber;
    // End of variables declaration//GEN-END:variables

    private void resetForm() {
        txtPrice.setText("");
        txtDiscount.setText("");
        txtPriceWithDiscount.setText("");
        txtSeatNumber.setText("");

    }
    
    private void adjustForm(FrmMode mode) {
        populateCmb();

        switch (mode) {
            case NEW:
                lblID.setVisible(false);
                txtReservationID.setVisible(false);
                txtAvailableSeats.setEnabled(false);
                cmbFlights.setEnabled(false);
                
                txtPrice.setEnabled(false);
                txtDiscount.setEnabled(false);
                txtPriceWithDiscount.setEnabled(false);
                txtSeatNumber.setEnabled(false);

                btnSave.setVisible(true);
                btnUpdate.setVisible(false);
                btnCancel.setVisible(true);
                
                setTitle("Add reservation:");
                break;
            case EDIT:
                txtReservationID.setEnabled(false);
                txtAvailableSeats.setVisible(false);
                lblAvailableSeats.setVisible(false);
                cmbPassengers.setEnabled(false);
                //lblClass.setVisible(false);
                //cmbAirplaneClasses.setVisible(false);
                txtPrice.setEnabled(false);
                txtDiscount.setEnabled(false);
                txtPriceWithDiscount.setEnabled(false);
                txtSeatNumber.setEnabled(false);
                
                btnSave.setVisible(false);
                btnUpdate.setVisible(true);
                btnCancel.setVisible(true);

                setTitle("Edit reservation:");
                break;
            case VIEW:
                //lblID.setVisible(true);
                //txtReservationID.setVisible(true);
                
                txtReservationID.setEnabled(false);
                cmbPassengers.setEnabled(false);
                cmbFlights.setEnabled(false);
                txtPrice.setEnabled(false);
                txtDiscount.setEnabled(false);
                txtPriceWithDiscount.setEnabled(false);
                txtSeatNumber.setEnabled(false);
                txtAvailableSeats.setVisible(false);
                lblAvailableSeats.setVisible(false);
                //lblClass.setVisible(false);
                //cmbAirplaneClasses.setVisible(false);
                cmbAirplaneClasses.setEnabled(false);

                btnSave.setVisible(false);
                btnUpdate.setVisible(false);
                btnCancel.setVisible(true);

                setTitle("View reservation:");
                break;
        }
    }
    
    // for EDIT and VIEW mode
    void populateForm(Reservation r, SearchReservationsPanel srp, FrmMode mode) {
        adjustForm(mode);
        this.reservation = r;
        this.srp = srp;
        this.selectedPassenger = r.getPassenger();
        txtReservationID.setText(r.getReservationID().toString());
        cmbPassengers.setSelectedItem(r.getPassenger());
        cmbFlights.setSelectedItem(r.getFlight());
        
        populateCmbAirplaneClasses(r.getFlight().getAirplane().getAirplaneID());
        
        for (int i = 0; i < cmbAirplaneClasses.getItemCount(); i++) {
            AirplaneClass airplaneClass = cmbAirplaneClasses.getItemAt(i);
            if(r.getSeatNumber() >= airplaneClass.getFirstSeat() && r.getSeatNumber() <= airplaneClass.getLastSeat()){
                cmbAirplaneClasses.setSelectedItem(airplaneClass);
                break;
            }
        }
        
        txtPrice.setText(r.getPrice().toString());
        txtDiscount.setText(r.getDiscount().toString() + "%");
        txtPriceWithDiscount.setText(r.getPriceWithDiscount().toString());
        txtSeatNumber.setText(r.getSeatNumber().toString());
        txtSeatNumber.setEnabled(false);
    }

    private void populateCmb() {
        populateCmbPassengers();
        populateCmbFlights();
    }

    private void populateCmbPassengers() {
        cmbPassengers.removeAllItems();
        List<Passenger> passengers = Controller.getInstance().getAllPassengers("");
        for (Passenger passenger : passengers) {
            cmbPassengers.addItem(passenger);
        }
    }

    private void populateCmbFlights() {
        cmbFlights.removeAllItems();
        List<Flight> flights = Controller.getInstance().getAllFlights("");
        for (Flight flight : flights) {
            cmbFlights.addItem(flight);
        }
    }

    private void populateCmbAirplaneClasses(Integer airplaneID) {
        cmbAirplaneClasses.removeAllItems();
        List<AirplaneClassAirplane> list = Controller.getInstance().getAssociation();
        
        for (AirplaneClassAirplane association : list) {
            if(association.getAirplane().getAirplaneID().equals(airplaneID)){
                cmbAirplaneClasses.addItem(association.getAirplaneClass());
            }
        }
        
    }

    private void generateSeatNumber(AirplaneClass selectedAirplaneClass, Flight selectedFlight) {
        if (selectedAirplaneClass == null) {
            JOptionPane.showMessageDialog(null, "You need to choose airplaneClass.");
            return;
        } else{
            int min = selectedAirplaneClass.getFirstSeat();
            int max = selectedAirplaneClass.getLastSeat();
            List<Reservation> reservations = Controller.getInstance().getAllReservations("");
            List<Integer> takenSeatNumbersForFlight = new LinkedList<Integer>();
            
        
            for (Reservation r : reservations) {
                if(r.getFlight().getFlightID().equals(selectedFlight.getFlightID()))
                    takenSeatNumbersForFlight.add(r.getSeatNumber());
            }
            
            if(takenSeatNumbersForFlight.contains(max)){
                txtSeatNumber.setText("full");
            }else{

                for (int i = min; i <= max; i++) {
                    if(!takenSeatNumbersForFlight.contains(i)){
                        txtSeatNumber.setText(i+"");
                        break;
                    }             
                }
            }
                
        }               
    }
    
    private Reservation validation() {
        boolean valid = FormValidator.getInstance().validateEmpty(txtPrice, txtDiscount, txtPriceWithDiscount, txtSeatNumber);
        if (!valid) {
            JOptionPane.showMessageDialog(this, FormValidator.getInstance().getValidationMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        Integer seatNumber;
        Double price, discount, priceWithDiscount;
        
        try {
            seatNumber = Integer.parseInt(txtSeatNumber.getText());
        } catch (Exception ex) {
            if(txtSeatNumber.getText().equals("full"))
                JOptionPane.showMessageDialog(this, "There is no available seats!");
            JOptionPane.showMessageDialog(this, "Seat number must be numeric value!");
            return null;
        }
        
        try {
            price = Double.parseDouble(txtPrice.getText());
            discount = Double.parseDouble(txtDiscount.getText().split("%")[0]);
            priceWithDiscount = Double.parseDouble(txtPriceWithDiscount.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Price and discount need to be numeric values!");
            return null;
        }
        
        Flight flight = new Flight();
        Passenger passenger = new Passenger();
        
        flight = (Flight) cmbFlights.getSelectedItem();
        passenger = (Passenger) cmbPassengers.getSelectedItem();
        
        // Checking if there is seats left for the chosen flight
        if(flight.getTakenSeats().equals(flight.getAirplane().getCapacity())){
            JOptionPane.showMessageDialog(this, "This flight is completely booked.");
            return null;
        }

        
        Reservation r = new Reservation(-1, seatNumber, price, discount, priceWithDiscount, flight, passenger);
        return r;
    }

    private void setDiscount(Integer collectedPoints) {
        if(collectedPoints != 0){
            Double discount = collectedPoints / 10.0;
            txtDiscount.setText(discount + "%");
            calculatePriceWithDiscount(discount);
        } else{
            txtDiscount.setText("0");
            calculatePriceWithDiscount(0.0);
        }
    }

    private void calculatePriceWithDiscount(Double discount) {
        txtPriceWithDiscount.setText(Double.parseDouble(txtPrice.getText()) * (1 - discount * 0.01) + "");    
    }
    
    
}
